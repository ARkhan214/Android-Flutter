import 'dart:typed_data';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import 'package:mk_bank_project/dto/transactiondto.dart';
import 'package:mk_bank_project/dto/accountsdto.dart';
import 'package:intl/intl.dart';

// Angular এর computeTotals লজিক থেকে নেওয়া
class TransactionTotals {
  final double totalWithdraw;
  final double totalDeposit;
  final double totalBalance;
  TransactionTotals(this.totalWithdraw, this.totalDeposit, this.totalBalance);
}

class PdfUtility {
  // Angular এর computeTotals লজিক এখানেও ব্যবহার করা হলো
  static TransactionTotals computeTotals(List<TransactionDTO> transactions) {
    double totalWithdraw = 0;
    double totalDeposit = 0;
    double runningBalance = 0;

    for (var tx in transactions) {
      final amount = tx.amount ?? 0;
      if (tx.type == 'DEBIT') {
        totalWithdraw += amount;
        runningBalance -= amount;
      } else if (tx.type == 'CREDIT') {
        totalDeposit += amount;
        runningBalance += amount;
      }
    }
    return TransactionTotals(totalWithdraw, totalDeposit, runningBalance);
  }

  //==========

  //==========generateTransactionStatement===Start

  // static Future<Uint8List> generateTransactionStatement(
  //     List<TransactionDTO> transactions, TransactionTotals totals) async {
  //   final pdf = pw.Document();
  //
  //   //if (transactions.isEmpty) return Uint8List(0);
  //
  //   final AccountsDTO? account = transactions.isNotEmpty ? transactions.first.account : null;
  //   final generatedDate = DateFormat('dd MMM yyyy, hh:mm a').format(DateTime.now().toLocal());
  //   final PdfColor darkBlue = PdfColor.fromInt(0xFF003366); // 0, 51, 102
  //
  //   pdf.addPage(
  //
  //     // pw.Page(
  //     //   pageFormat: PdfPageFormat.a4,
  //     //   build: (pw.Context context) {
  //     //     return pw.Column(
  //     //       crossAxisAlignment: pw.CrossAxisAlignment.start,
  //     //       children: [
  //     //         // -------- Header Section ----------
  //     //         _buildHeader(darkBlue),
  //     //         pw.Divider(color: darkBlue, thickness: 0.6),
  //     //
  //     //         // -------- Customer Info Section ----------
  //     //         if (account != null)
  //     //           _buildCustomerInfo(account, darkBlue, generatedDate),
  //     //         pw.SizedBox(height: 15),
  //     //
  //     //         // -------- Transactions Table Title ----------
  //     //         pw.Text('Transaction Details',
  //     //             style: pw.TextStyle(
  //     //                 fontWeight: pw.FontWeight.bold,
  //     //                 fontSize: 14,
  //     //                 color: darkBlue)),
  //     //         pw.SizedBox(height: 5),
  //     //
  //     //         // -------- Transactions Table and Totals ----------
  //     //         _buildTransactionTable(transactions, totals, darkBlue),
  //     //
  //     //         pw.SizedBox(height: 20),
  //     //
  //     //         // -------- Footer ----------
  //     //         pw.Text(
  //     //           "This report has been generated from MK Bank iBanking based on available data. No signature required.",
  //     //           style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey),
  //     //         ),
  //     //       ],
  //     //     );
  //     //   },
  //     // ),
  //
  //     pw.MultiPage(
  //       pageFormat: PdfPageFormat.a4,
  //       margin: const pw.EdgeInsets.all(20),
  //       build: (pw.Context context) => [
  //         _buildHeader(darkBlue),
  //         pw.Divider(color: darkBlue, thickness: 0.6),
  //         if (account != null)
  //           _buildCustomerInfo(account, darkBlue, generatedDate),
  //         pw.SizedBox(height: 15),
  //         pw.Text(
  //           'Transaction Details',
  //           style: pw.TextStyle(
  //             fontWeight: pw.FontWeight.bold,
  //             fontSize: 14,
  //             color: darkBlue,
  //           ),
  //         ),
  //         pw.SizedBox(height: 5),
  //         _buildTransactionTable(transactions, totals, darkBlue),
  //         pw.SizedBox(height: 20),
  //         pw.Text(
  //           "This report has been generated from MK Bank iBanking based on available data. No signature required.",
  //           style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey),
  //         ),
  //       ],
  //     ),
  //
  //
  //   );
  //
  //   return pdf.save();
  // }


  // static Future<Uint8List> generateTransactionStatement(
  //     List<TransactionDTO> transactions, TransactionTotals totals) async {
  //
  //   final pdf = pw.Document();
  //
  //   // Unicode-compatible fonts (Roboto)
  //   final font = await PdfGoogleFonts.robotoRegular();
  //   final boldFont = await PdfGoogleFonts.robotoBold();
  //
  //   final AccountsDTO? account =
  //   transactions.isNotEmpty ? transactions.first.account : null;
  //
  //   final generatedDate =
  //   DateFormat('dd MMM yyyy, hh:mm a').format(DateTime.now().toLocal());
  //
  //   final PdfColor darkBlue = PdfColor.fromInt(0xFF003366);
  //
  //   pdf.addPage(
  //     pw.MultiPage(
  //       pageFormat: PdfPageFormat.a4,
  //       margin: const pw.EdgeInsets.all(20),
  //       maxPages: 1000, // safeguard (adjust if you want)
  //       theme: pw.ThemeData.withFont(base: font, bold: boldFont),
  //       header: (pw.Context ctx) {
  //         // Optional repeated header on each page (compact)
  //         return pw.Container(
  //           padding: const pw.EdgeInsets.only(bottom: 6),
  //           child: pw.Row(
  //             mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
  //             children: [
  //               pw.Text('MK Bank PLC.', style: pw.TextStyle(fontWeight: pw.FontWeight.bold)),
  //               pw.Text('Report generated: $generatedDate', style: const pw.TextStyle(fontSize: 8)),
  //             ],
  //           ),
  //         );
  //       },
  //       footer: (pw.Context ctx) {
  //         return pw.Container(
  //           alignment: pw.Alignment.centerRight,
  //           margin: const pw.EdgeInsets.only(top: 6),
  //           child: pw.Text('Page ${ctx.pageNumber} of ${ctx.pagesCount}', style: const pw.TextStyle(fontSize: 8)),
  //         );
  //       },
  //       build: (pw.Context context) => [
  //         // main page content
  //         _buildHeader(darkBlue),
  //         pw.Divider(color: darkBlue, thickness: 0.6),
  //         if (account != null) _buildCustomerInfo(account, darkBlue, generatedDate),
  //         pw.SizedBox(height: 12),
  //         pw.Text('Transaction Details', style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 14, color: darkBlue)),
  //         pw.SizedBox(height: 6),
  //         _buildTransactionTable(transactions, totals, darkBlue),
  //         pw.SizedBox(height: 12),
  //         pw.Text("This report has been generated from MK Bank iBanking based on available data. No signature required.",
  //             style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey)),
  //       ],
  //     ),
  //   );
  //
  //   return pdf.save();
  // }

  static Future<Uint8List> generateTransactionStatement(
      List<TransactionDTO> transactions, TransactionTotals totals) async {

    final pdf = pw.Document();

    // Unicode-compatible fonts (Roboto)
    final font = await PdfGoogleFonts.robotoRegular();
    final boldFont = await PdfGoogleFonts.robotoBold();

    final AccountsDTO? account =
    transactions.isNotEmpty ? transactions.first.account : null;

    final generatedDate =
    DateFormat('dd MMM yyyy, hh:mm a').format(DateTime.now().toLocal());

    final PdfColor darkBlue = PdfColor.fromInt(0xFF003366);

    pdf.addPage(
      pw.MultiPage(
        pageFormat: PdfPageFormat.a4,
        margin: const pw.EdgeInsets.all(20),
        maxPages: 1000,
        theme: pw.ThemeData.withFont(base: font, bold: boldFont),

        // ❌ Note: 'header' ব্লকটি সরানো আছে (যাতে ২য় পাতায় পুনরাবৃত্তি না হয়)।

        footer: (pw.Context ctx) {
          // ফুটার বা পেজ নম্বর রিপিট করার জন্য ফুটার রাখা হয়েছে।
          return pw.Container(
            alignment: pw.Alignment.centerRight,
            margin: const pw.EdgeInsets.only(top: 6),
            child: pw.Text('Page ${ctx.pageNumber} of ${ctx.pagesCount}', style: const pw.TextStyle(fontSize: 8)),
          );
        },
        build: (pw.Context context) => [
          // main page content
          _buildHeader(darkBlue),
          pw.Divider(color: darkBlue, thickness: 0.6),
          if (account != null) _buildCustomerInfo(account, darkBlue, generatedDate),

          // ✅ ফিক্স ১: অ্যাকাউন্ট তথ্যের পর স্পেস কমানো হয়েছে।
          pw.SizedBox(height: 5),

          pw.Text('Transaction Details', style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 14, color: darkBlue)),

          // ✅ ফিক্স ২: "Transaction Details" টেক্সটের পর স্পেস কমানো হয়েছে।
          pw.SizedBox(height: 2),

          // টেবিলটি এখন উপরের কন্টেন্টের ঠিক পরেই শুরু হতে বাধ্য হবে।
          _buildTransactionTable(transactions, totals, darkBlue),

          pw.SizedBox(height: 12),
          pw.Text("This report has been generated from MK Bank iBanking based on available data. No signature required.",
              style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey)),
        ],
      ),
    );

    return pdf.save();
  }



  //=====generateTransactionStatement End==========

  static pw.Widget _buildHeader(PdfColor darkBlue) {
    return pw.Center(
      child: pw.Column(
        children: [
          pw.Text(
            'MK Bank PLC.',
            style: pw.TextStyle(
              fontWeight: pw.FontWeight.bold,
              fontSize: 22,
              color: darkBlue,
            ),
          ),
          pw.Text('Head Office, Dhaka', style: const pw.TextStyle(fontSize: 12)),
          pw.Text('Trusted Banking Partner Since 1990',
              style: pw.TextStyle(fontSize: 10, color: PdfColors.grey700)),
        ],
      ),
    );
  }

  static pw.Widget _buildCustomerInfo(
      AccountsDTO account, PdfColor darkBlue, String generatedDate) {

    final String openingDate = account.accountOpeningDate != null
        ? DateFormat('yyyy-MM-dd').format(DateTime.parse(account.accountOpeningDate!))
        : '---';

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Row(
          mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
          children: [
            pw.Text('Customer Information',
                style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold, fontSize: 14, color: darkBlue)),
            pw.Text(
              'Report generated: $generatedDate',
              style: pw.TextStyle(
                  fontWeight: pw.FontWeight.bold, fontSize: 10, color: darkBlue),
            ),
          ],
        ),
        pw.SizedBox(height: 5),
        pw.Row(
          mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            // Left Column
            pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                _infoRow('Customer ID:', '${account.id ?? '---'}'),
                _infoRow('Name:', account.name),
                _infoRow('Address:', account.address),
              ],
            ),
            // Right Column
            pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                _infoRow('Account Type:', account.accountType),
                _infoRow('Opening Date:', openingDate),
                _infoRow('Telephone:', account.phoneNumber),
              ],
            ),
            pw.SizedBox(width: 50), // স্পেস বজায় রাখার জন্য
          ],
        ),
      ],
    );
  }

  static pw.Widget _infoRow(String label, String value) {
    return pw.Padding(
      padding: const pw.EdgeInsets.symmetric(vertical: 2),
      child: pw.Row(
        children: [
          pw.SizedBox(
            width: 80, // লেবেলের জন্য নির্দিষ্ট প্রস্থ
            child: pw.Text(label,
                style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 11)),
          ),
          pw.Text(value, style: const pw.TextStyle(fontSize: 11)),
        ],
      ),
    );
  }


//========_buildTransactionTable Start===========

  // static pw.Widget _buildTransactionTable(
  //     List<TransactionDTO> transactions, TransactionTotals totals, PdfColor darkBlue) {
  //   final headers = [
  //     'Date',
  //     'Particulars',
  //     'Inst. No',
  //     'Type',
  //     'Withdraw',
  //     'Deposit',
  //     'Balance'
  //   ];
  //
  //   final List<List<String>> tableData = [];
  //
  //   for (var tx in transactions) {
  //     final String dateString = tx.transactionTime != null
  //         ? DateFormat('dd MMM yy').format(DateTime.parse(tx.transactionTime!))
  //         : '---';
  //
  //     final String description = tx.description ?? '';
  //     final String id = '${tx.id ?? ''}';
  //     final String type = tx.type ?? '';
  //
  //     final String withdraw = tx.type == 'DEBIT'
  //         ? (tx.amount?.toStringAsFixed(2) ?? '')
  //         : '';
  //
  //     //final String withdraw = tx.type == 'DEBIT'
  //     //     ? (tx.amount ?? 0.0).toStringAsFixed(2)
  //     //     : '';
  //
  //      final String deposit = tx.type == 'CREDIT'
  //          ? (tx.amount?.toStringAsFixed(2) ?? '')
  //          : '';
  //
  //    // final String deposit = tx.type == 'CREDIT'
  //    //      ? (tx.amount ?? 0.0).toStringAsFixed(2)
  //    //      : '';
  //
  //     final String balance = tx.runningBalance?.toStringAsFixed(2) ?? '';
  //     //final String balance = (tx.runningBalance ?? 0.0).toStringAsFixed(2);
  //
  //     tableData.add([
  //       dateString,
  //       description,
  //       id,
  //       type,
  //       withdraw,
  //       deposit,
  //       balance,
  //     ]);
  //   }
  //
  //   // টেবিল তৈরি
  //   final transactionTable = pw.Table.fromTextArray(
  //     headers: headers,
  //     data: tableData,
  //     border: pw.TableBorder.all(color: PdfColors.grey400, width: 0.5),
  //     headerStyle: pw.TextStyle(
  //         color: PdfColors.white, fontWeight: pw.FontWeight.bold, fontSize: 9),
  //     headerDecoration: pw.BoxDecoration(color: darkBlue),
  //
  //     cellAlignment: pw.Alignment.centerLeft, // ডিফল্ট alignment বাম দিকে
  //
  //     // ✅ ফিক্স: cellAlignments ব্যবহার করা হলো যা TableCellFormat এরর বাইপাস করবে।
  //     cellAlignments: {
  //       4: pw.Alignment.centerRight, // Withdraw (5th column, index 4)
  //       5: pw.Alignment.centerRight, // Deposit (6th column, index 5)
  //       6: pw.Alignment.centerRight, // Balance (7th column, index 6)
  //     },
  //
  //     cellStyle: const pw.TextStyle(fontSize: 8),
  //     cellPadding: const pw.EdgeInsets.all(3),
  //
  //     columnWidths: {
  //       0: const pw.FixedColumnWidth(1.2),
  //       1: const pw.FixedColumnWidth(2.5),
  //       2: const pw.FixedColumnWidth(1.2),
  //       3: const pw.FixedColumnWidth(1),
  //       4: const pw.FixedColumnWidth(1.5),
  //       5: const pw.FixedColumnWidth(1.5),
  //       6: const pw.FixedColumnWidth(1.5),
  //     },
  //
  //     // cellFormat ব্লকটি পুরোপুরি মুছে ফেলা হয়েছে।
  //   );
  //
  //   // মোট দেখানোর জন্য একটি নতুন কলাম/রো তৈরি করা (আগে থেকেই ফিক্সড ছিল)
  //   final totalRow = pw.Container(
  //     decoration: const pw.BoxDecoration(
  //       color: PdfColors.grey300,
  //     ),
  //     padding: const pw.EdgeInsets.symmetric(horizontal: 5, vertical: 5),
  //     child: pw.Row(
  //       children: [
  //         pw.Expanded(
  //           flex: 6,
  //           child: pw.Text('TOTAL',
  //               textAlign: pw.TextAlign.right,
  //               style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 10, color: PdfColors.black)),
  //         ),
  //         // Withdraw Total
  //         pw.Expanded(
  //           flex: 2,
  //           child: pw.Text(totals.totalWithdraw.toStringAsFixed(2),
  //               textAlign: pw.TextAlign.right,
  //               style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9, color: PdfColors.black)),
  //         ),
  //         // Deposit Total
  //         pw.Expanded(
  //           flex: 2,
  //           child: pw.Text(totals.totalDeposit.toStringAsFixed(2),
  //               textAlign: pw.TextAlign.right,
  //               style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9, color: PdfColors.black)),
  //         ),
  //         // Balance Total
  //         pw.Expanded(
  //           flex: 2,
  //           child: pw.Text(totals.totalBalance.toStringAsFixed(2),
  //               textAlign: pw.TextAlign.right,
  //               style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9, color: PdfColors.blue900)),
  //         ),
  //       ],
  //     ),
  //   );
  //
  //   // টেবিল এবং টোটাল একসাথে কলামে দেখানো
  //   return pw.Column(
  //     crossAxisAlignment: pw.CrossAxisAlignment.stretch,
  //     children: [
  //       transactionTable,
  //       totalRow,
  //     ],
  //   );
  // }



  // static pw.Widget _buildTransactionTable(
  //     List<TransactionDTO> transactions,
  //     TransactionTotals totals,
  //     PdfColor darkBlue) {
  //   final headers = [
  //     'Date',
  //     'Particulars',
  //     'Inst. No',
  //     'Type',
  //     'Withdraw',
  //     'Deposit',
  //     'Balance'
  //   ];
  //
  //   // Prepare table data
  //   final data = transactions.map((tx) {
  //     final dateString = tx.transactionTime != null
  //         ? DateFormat('dd MMM yy').format(DateTime.parse(tx.transactionTime!))
  //         : '---';
  //
  //     final description = (tx.description ?? '').replaceAll('\n', ' '); // single-line per cell; newlines can cause layout issues
  //     final id = '${tx.id ?? ''}';
  //     final type = tx.type ?? '';
  //
  //     final withdraw = tx.type == 'DEBIT' ? (tx.amount?.toStringAsFixed(2) ?? '') : '';
  //     final deposit = tx.type == 'CREDIT' ? (tx.amount?.toStringAsFixed(2) ?? '') : '';
  //     final balance = tx.runningBalance?.toStringAsFixed(2) ?? '';
  //
  //     return [
  //       dateString,
  //       description,
  //       id,
  //       type,
  //       withdraw,
  //       deposit,
  //       balance,
  //     ];
  //   }).toList();
  //
  //   // Use fromTextArray but with flexible column widths to allow wrapping
  //   final table = pw.Table.fromTextArray(
  //     headers: headers,
  //     data: data,
  //     border: pw.TableBorder.all(color: PdfColors.grey400, width: 0.35),
  //     headerStyle: pw.TextStyle(color: PdfColors.white, fontWeight: pw.FontWeight.bold, fontSize: 9),
  //     headerDecoration: pw.BoxDecoration(color: darkBlue),
  //     cellStyle: const pw.TextStyle(fontSize: 8),
  //     cellPadding: const pw.EdgeInsets.symmetric(vertical: 4, horizontal: 4),
  //     cellAlignments: {
  //       0: pw.Alignment.centerLeft,
  //       1: pw.Alignment.centerLeft,
  //       2: pw.Alignment.centerLeft,
  //       3: pw.Alignment.center,
  //       4: pw.Alignment.centerRight,
  //       5: pw.Alignment.centerRight,
  //       6: pw.Alignment.centerRight,
  //     },
  //     // IMPORTANT: use flexible widths (FlexColumnWidth) to let long description wrap
  //     columnWidths: {
  //       0: const pw.FlexColumnWidth(1), // date
  //       1: const pw.FlexColumnWidth(4), // particulars (bigger)
  //       2: const pw.FlexColumnWidth(1), // inst no
  //       3: const pw.FlexColumnWidth(1), // type
  //       4: const pw.FlexColumnWidth(1), // withdraw
  //       5: const pw.FlexColumnWidth(1), // deposit
  //       6: const pw.FlexColumnWidth(1), // balance
  //     },
  //   );
  //
  //   // Totals row: avoid Expanded; use fixed sized boxes for stability
  //   final totalRow = pw.Container(
  //     width: double.infinity,
  //     color: PdfColors.grey300,
  //     padding: const pw.EdgeInsets.symmetric(vertical: 6, horizontal: 8),
  //     child: pw.Row(
  //       children: [
  //         // Put a spacer covering columns 0..3 (approx)
  //         pw.Expanded(
  //           flex: 6,
  //           child: pw.Container(), // empty, just push totals to right
  //         ),
  //         pw.SizedBox(
  //           width: 60,
  //           child: pw.Text(
  //             totals.totalWithdraw.toStringAsFixed(2),
  //             textAlign: pw.TextAlign.right,
  //             style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9),
  //           ),
  //         ),
  //         pw.SizedBox(width: 8),
  //         pw.SizedBox(
  //           width: 60,
  //           child: pw.Text(
  //             totals.totalDeposit.toStringAsFixed(2),
  //             textAlign: pw.TextAlign.right,
  //             style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9),
  //           ),
  //         ),
  //         pw.SizedBox(width: 8),
  //         pw.SizedBox(
  //           width: 60,
  //           child: pw.Text(
  //             totals.totalBalance.toStringAsFixed(2),
  //             textAlign: pw.TextAlign.right,
  //             style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9, color: PdfColors.blue900),
  //           ),
  //         ),
  //       ],
  //     ),
  //   );
  //
  //   return pw.Column(
  //     crossAxisAlignment: pw.CrossAxisAlignment.stretch,
  //     children: [
  //       table,
  //       pw.SizedBox(height: 6),
  //       totalRow,
  //     ],
  //   );
  // }


  static pw.Widget _buildTransactionTable(
      List<TransactionDTO> transactions,
      TransactionTotals totals,
      PdfColor darkBlue,
      ) {
    final headers = [
      'Date',
      'Particulars',
      'Inst. No',
      'Type',
      'Withdraw',
      'Deposit',
      'Balance'
    ];

    final data = transactions.map((tx) {
      final dateString = tx.transactionTime != null
          ? DateFormat('dd MMM yy').format(DateTime.parse(tx.transactionTime!))
          : '---';

      final description = (tx.description ?? '').replaceAll('\n', ' ');
      final id = '${tx.id ?? ''}';
      final type = tx.type ?? '';

      final withdraw = tx.type == 'DEBIT' ? (tx.amount?.toStringAsFixed(2) ?? '') : '';
      final deposit = tx.type == 'CREDIT' ? (tx.amount?.toStringAsFixed(2) ?? '') : '';
      final balance = tx.runningBalance?.toStringAsFixed(2) ?? '';

      return [
        dateString,
        description,
        id,
        type,
        withdraw,
        deposit,
        balance,
      ];
    }).toList();

    // ✅ Use TableHelper.fromTextArray for automatic multi-page splitting
    final table = pw.TableHelper.fromTextArray(
      headers: headers,
      data: data,
      border: pw.TableBorder.all(color: PdfColors.grey400, width: 0.35),
      headerStyle: pw.TextStyle(
        color: PdfColors.white,
        fontWeight: pw.FontWeight.bold,
        fontSize: 9,
      ),
      headerDecoration: pw.BoxDecoration(color: darkBlue),
      cellStyle: const pw.TextStyle(fontSize: 8),
      cellPadding: const pw.EdgeInsets.symmetric(vertical: 4, horizontal: 4),
      cellAlignments: {
        0: pw.Alignment.centerLeft,
        1: pw.Alignment.centerLeft,
        2: pw.Alignment.centerLeft,
        3: pw.Alignment.center,
        4: pw.Alignment.centerRight,
        5: pw.Alignment.centerRight,
        6: pw.Alignment.centerRight,
      },
      columnWidths: {
        0: const pw.FlexColumnWidth(1),
        1: const pw.FlexColumnWidth(4),
        2: const pw.FlexColumnWidth(1),
        3: const pw.FlexColumnWidth(1),
        4: const pw.FlexColumnWidth(1),
        5: const pw.FlexColumnWidth(1),
        6: const pw.FlexColumnWidth(1),
      },
      // ✅ This ensures the header row repeats on every new page
      repeatHeader: true,
    );

    // Totals row at the bottom
    final totalRow = pw.Container(
      width: double.infinity,
      color: PdfColors.grey300,
      padding: const pw.EdgeInsets.symmetric(vertical: 6, horizontal: 8),
      child: pw.Row(
        children: [
          pw.Expanded(flex: 6, child: pw.Container()),
          pw.SizedBox(
            width: 60,
            child: pw.Text(
              totals.totalWithdraw.toStringAsFixed(2),
              textAlign: pw.TextAlign.right,
              style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9),
            ),
          ),
          pw.SizedBox(width: 8),
          pw.SizedBox(
            width: 60,
            child: pw.Text(
              totals.totalDeposit.toStringAsFixed(2),
              textAlign: pw.TextAlign.right,
              style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 9),
            ),
          ),
          pw.SizedBox(width: 8),
          pw.SizedBox(
            width: 60,
            child: pw.Text(
              totals.totalBalance.toStringAsFixed(2),
              textAlign: pw.TextAlign.right,
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 9,
                color: PdfColors.blue900,
              ),
            ),
          ),
        ],
      ),
    );

    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.stretch,
      children: [
        table,
        pw.SizedBox(height: 6),
        totalRow,
      ],
    );
  }





//======_buildTransactionTable End========
}